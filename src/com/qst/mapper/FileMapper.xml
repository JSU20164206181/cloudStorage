<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qst.mapper.FileMapper">
  <resultMap id="BaseResultMap" type="com.qst.entity.File">
    <id column="file_id" jdbcType="INTEGER" property="fileId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="upload_datetime" jdbcType="TIMESTAMP" property="uploadDatetime" />
    <result column="upload_ip" jdbcType="VARCHAR" property="uploadIp" />
    <result column="file_name" jdbcType="VARCHAR" property="fileName" />
    <result column="file_size" jdbcType="INTEGER" property="fileSize" />
    <result column="file_type" jdbcType="VARCHAR" property="fileType" />
    <result column="file_path" jdbcType="VARCHAR" property="filePath" />
    <result column="person_id" jdbcType="INTEGER" property="personId" />
    <result column="directory_id" jdbcType="INTEGER" property="directoryId" />
    <result column="file_status" jdbcType="INTEGER" property="fileStatus" />
  </resultMap>
  <sql id="Base_Column_List">
    file_id, user_id, user_name, upload_datetime, upload_ip, file_name, file_size, file_type, 
    file_path, person_id, directory_id, file_status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from file_inf
    where file_id = #{fileId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from file_inf
    where file_id = #{fileId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qst.entity.File">
    insert into file_inf (file_id, user_id, user_name, 
      upload_datetime, upload_ip, file_name, 
      file_size, file_type, file_path, 
      person_id, directory_id, 
      file_status)
    values (#{fileId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, 
      #{uploadDatetime,jdbcType=TIMESTAMP}, #{uploadIp,jdbcType=VARCHAR}, #{fileName,jdbcType=VARCHAR}, 
      #{fileSize,jdbcType=INTEGER}, #{fileType,jdbcType=VARCHAR}, #{filePath,jdbcType=VARCHAR}, 
      #{personId,jdbcType=INTEGER}, #{directoryId,jdbcType=INTEGER}, 
      #{fileStatus,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.qst.entity.File">
    insert into file_inf
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="fileId != null">
        file_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="uploadDatetime != null">
        upload_datetime,
      </if>
      <if test="uploadIp != null">
        upload_ip,
      </if>
      <if test="fileName != null">
        file_name,
      </if>
      <if test="fileSize != null">
        file_size,
      </if>
      <if test="fileType != null">
        file_type,
      </if>
      <if test="filePath != null">
        file_path,
      </if>
      <if test="personId != null">
        person_id,
      </if>
      <if test="directoryId != null">
        directory_id,
      </if>
      <if test="fileStatus != null">
        file_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="fileId != null">
        #{fileId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="uploadDatetime != null">
        #{uploadDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="uploadIp != null">
        #{uploadIp,jdbcType=VARCHAR},
      </if>
      <if test="fileName != null">
        #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="fileSize != null">
        #{fileSize,jdbcType=INTEGER},
      </if>
      <if test="fileType != null">
        #{fileType,jdbcType=VARCHAR},
      </if>
      <if test="filePath != null">
        #{filePath,jdbcType=VARCHAR},
      </if>
      <if test="personId != null">
        #{personId,jdbcType=INTEGER},
      </if>
      <if test="directoryId != null">
        #{directoryId,jdbcType=INTEGER},
      </if>
      <if test="fileStatus != null">
        #{fileStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qst.entity.File">
    update file_inf
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="uploadDatetime != null">
        upload_datetime = #{uploadDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="uploadIp != null">
        upload_ip = #{uploadIp,jdbcType=VARCHAR},
      </if>
      <if test="fileName != null">
        file_name = #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="fileSize != null">
        file_size = #{fileSize,jdbcType=INTEGER},
      </if>
      <if test="fileType != null">
        file_type = #{fileType,jdbcType=VARCHAR},
      </if>
      <if test="filePath != null">
        file_path = #{filePath,jdbcType=VARCHAR},
      </if>
      <if test="personId != null">
        person_id = #{personId,jdbcType=INTEGER},
      </if>
      <if test="directoryId != null">
        directory_id = #{directoryId,jdbcType=INTEGER},
      </if>
      <if test="fileStatus != null">
        file_status = #{fileStatus,jdbcType=INTEGER},
      </if>
    </set>
    where file_id = #{fileId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qst.entity.File">
    update file_inf
    set user_id = #{userId,jdbcType=INTEGER},
      user_name = #{userName,jdbcType=VARCHAR},
      upload_datetime = #{uploadDatetime,jdbcType=TIMESTAMP},
      upload_ip = #{uploadIp,jdbcType=VARCHAR},
      file_name = #{fileName,jdbcType=VARCHAR},
      file_size = #{fileSize,jdbcType=INTEGER},
      file_type = #{fileType,jdbcType=VARCHAR},
      file_path = #{filePath,jdbcType=VARCHAR},
      person_id = #{personId,jdbcType=INTEGER},
      directory_id = #{directoryId,jdbcType=INTEGER},
      file_status = #{fileStatus,jdbcType=INTEGER}
    where file_id = #{fileId,jdbcType=INTEGER}
  </update>
  <!-- 管理员分页查询所有文件 -->
  <select id="findAllFilesByPage" resultMap="BaseResultMap">
    select * from file_inf
    <if test="fileStatus!=null">
    where file_status=#{fileStatus}
    </if>
    order by upload_datetime desc
    <if test="pg.page!=null and pg.pageSize!=null">
    limit #{pg.page},#{pg.pageSize} 
    </if>
  </select>
  <!-- 管理员查询所有文件总数 -->
  <select id="findFileTotal" resultType="int">
    select count(*) from file_inf
    <if test="fileStatus!=null">
    where file_status=#{fileStatus}
    </if>   
  </select>
  <!-- 管理员根据文件类型分页查询文件 -->
  <select id="findFilesByType" resultMap="BaseResultMap">
    select * from file_inf 
    <where>
    <if test="file.fileType!=null">
    and file_type=#{file.fileType} 
    </if>
    <if test="file.fileStatus!=null">
    and file_status=#{file.fileStatus}
    </if>
    </where>
    order by upload_datetime desc
    <if test="pg.page!=null and pg.pageSize!=null">
    limit #{pg.page},#{pg.pageSize} 
    </if>
  </select>
  <!-- 管理员查询分类文件总数 -->
  <select id="findFileTotalByType" resultType="int">
    select count(*) from file_inf   
    <where>
    <if test="file.fileType!=null">
    and file_type=#{file.fileType}
    </if>
    <if test="file.fileStatus!=null">
    and file_status=#{file.fileStatus}
    </if>
    </where>
  </select> 
  <select id="findFilesByAttribute" resultMap="BaseResultMap">
    select * from file_inf 
    <if test="file.fileName!=null">
    where file_name like concat('%',#{file.fileName},'%')
    </if>
    <if test="file.userName!=null">
    where user_name like concat('%',#{file.userName},'%')
    </if>
    <if test="file.uploadIp!=null">
    where upload_ip like concat('%',#{file.uploadIp},'%')
    </if>
    <if test="startTime!=null and endTime!=null">
    and upload_datetime between DATE_FORMAT(#{startTime},'%Y-%m-%d') and DATE_FORMAT(#{endTime},'%Y-%m-%d')
    </if>
    order by upload_datetime desc
    <if test="pg.page!=null and pg.pageSize!=null">
    limit #{pg.page},#{pg.pageSize} 
    </if>
  </select>
  <!-- 管理员按文件属性模糊查找文件总数 -->
  <select id="findFileTotalByAttribute" parameterType="com.qst.entity.File" resultType="int">
    select count(*) from file_inf 
    <if test="file.fileName!=null">
    where file_name like concat('%',#{file.fileName},'%')
    </if>
    <if test="file.userName!=null">
    where user_name like concat('%',#{file.userName},'%')
    </if>
    <if test="file.uploadIp!=null">
    where upload_ip like concat('%',#{file.uploadIp},'%')
    </if>
    <if test="startTime!=null and endTime!=null">
    and upload_datetime between DATE_FORMAT(#{startTime},'%Y-%m-%d') and DATE_FORMAT(#{endTime},'%Y-%m-%d')
    </if>
  </select>
  <!-- 分页模糊查找我的文件 -->
  <select id="fuzzyFindMyFiles" resultMap="BaseResultMap">
  	select * from file_inf 
  	<where>
  	<if test="file.fileName!=null">
    and file_name like concat('%',#{file.fileName},'%')
    </if>
    <if test="file.userId!=null">
    and user_id = #{file.userId}
    </if>
  	</where>
    order by upload_datetime desc
    <if test="pg.page!=null and pg.pageSize!=null">
    limit #{pg.page},#{pg.pageSize} 
    </if> 
  </select>
    <!--  用户文件管理========start               -->
   <!--  分页查询全部目录下文件列表 -->  
   <select id="userSelectFileByDirId"  resultMap="BaseResultMap"> 
    select * from file_inf where  directory_id=#{dirId} and  user_id=#{userId} and  file_status=1 limit #{nowPage},#{pageSize} 
   </select>
	<!-- 查找文件目录下已删除文件 -->
   <select id="alreadyDeleteFileByDirId"  resultMap="BaseResultMap"> 
   select * from file_inf where  directory_id=#{dirId}  and  file_status=3
   </select>
   <!--  查询目录下全部文件列表 --> 
   <select id="userSelectAllFileByDirId"  resultMap="BaseResultMap">
    select * from file_inf where  directory_id=#{dirId} and  user_id=#{userId} and  file_status=1 
   </select>
    <!--  根据名字查询目录下文件 --> 
   <select id="userSelecttByName"  resultMap="BaseResultMap"> 
    select * from file_inf where  directory_id=#{dirId} and  user_id=#{userId} and file_name=#{name}and  file_status=1 
   </select>
   <!--  查询全部目录下文件数量 -->
   <select id="userFileNumberByDirId" resultType="int">     
    select count(*) from file_inf where  directory_id=#{dirId} and  user_id=#{userId} and  file_status=1 
   </select>
    <!--  查询分类文件列表 -->  
   <select id="fileByType"  resultMap="BaseResultMap">  
    select * from file_inf where  file_type=#{type} and  user_id=#{userId} and  file_status=1 limit #{nowPage},#{pageSize}  
   </select>
    <!--  查询分类文件数量 --> 
   <select id="fileNumberByType" resultType="int">     
    select count(*) from file_inf where  file_type=#{type} and  user_id=#{userId} and  file_status=1   
   </select>
   <!-- 回收站文件 -->
    <select id="findRecycleFile"  resultMap="BaseResultMap"> 
    select * from file_inf where  user_id=#{userId} and  file_status=3 
   </select>
   <!-- 用户文件管理 ==========end           -->
  <!-- 管理员按文件属性模糊查找文件 -->
  <!-- 根据父文件夹id查询所有文件 -->
  <select id="findFileListByDirId" resultMap="BaseResultMap">     
    select * from file_inf where  directory_id=#{dirId} and  file_status=1 
   </select>
   
   <!-- 查询所有文件 -->
   <select id="findAllFile"  resultMap="BaseResultMap">
       select * from file_inf where  user_id=#{userId} and file_status=1 
   </select>
   
</mapper>